//SPWN Script that converts the Mandelbrot fractal to a Geometry Dash level, made by Cosh-X
//All the pixels are colored after the number of iterations that z takes to diverge past the value of 2
//Every pixel is also in group 999 if you want to add any extra effects

//Idea: If 4 adjacent blocks have the same group: place a bigger block instead

extract obj_props
//RePos: Real coordinate of the center point
let RePos = -0.8
//ImPos: Imaginary coordinate of the center point
let ImPos = 0
//range: Diameter of the portion you want to render on the complex plane
let range = 2.5
//iterations: Max number of calculated iterations
let iterations = 20
//res: Resolution of the render in pixels
let res = 30
//xpos: X-Position of the bottom left corner of the image in the editor
let xpos = 30
//ypos: Y-Position of the bottom left corner of the image in the editor
let ypos = 30
//scale: Scale of the pixels in the editor
let scale = 1
//group: Group that every pixel should have
let group = 999g
//color: Color channel that every pixel should use (Feel free to play around with that color in the editor, as it will affect the hue of every colored pixel)
let color = 1c
//layer: Layer of the image in the editor. Default value: 0
let layer = 0

for n in 0..res {
    for k in 0..res{
        let c = @complex::new(((RePos - (range / 2)) + (range / (res - 1)) * n), (ImPos - (range / 2) + (range / (res - 1)) * k))
        let z = @complex::new(0)
        let pixel = obj {
            OBJ_ID: 917,
            X: xpos + (scale * 7.5) * n,
            Y: ypos + (scale * 7.5) * k,
            COLOR: color,
            EDITOR_LAYER_1: layer,
            SCALING: scale,
            HVS_ENABLED: true,
            GROUPS: group,
        }
        for i in 0..(iterations + 1) {
            if z.abs() > 2 {       
                $.add(pixel.with(GROUPS, [(i as @group), group]))
                break
            }
            if i == iterations {
                $.add(pixel.with(HVS, "60a0a0a0a0"))
                break
            }
            z = z ^ 2 + c
        }
    }
    $.print("Building: " , (100 * n / res), "%")
}
for h in 1..(iterations + 1) {
    ->(h as @group).pulse((-180 + (360 / iterations) * h), 1, 1, hold = 999, hsv = true)
}

